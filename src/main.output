Terminals unused in grammar

   POINT
   BREAK
   CONTINUE
   ELSE


Grammar

    0 $accept: program $end

    1 program: VOID MAIN LBRACKET RBRACKET LBRACE stmts RBRACE

    2 stmts: stmt
    3      | stmts stmt

    4 stmt: LBRACE SEMICOLON
    5     | decl SEMICOLON
    6     | assign SEMICOLON
    7     | LBRACE stmts RBRACE
    8     | WHILE LBRACKET cond RBRACKET stmt
    9     | IF LBRACKET cond RBRACKET stmt
   10     | FOR LBRACKET stmt cond SEMICOLON for3 RBRACKET stmt
   11     | RETURN expr SEMICOLON
   12     | RETURN SEMICOLON
   13     | PRINT LBRACKET ids RBRACKET SEMICOLON
   14     | SCAN LBRACKET ids RBRACKET SEMICOLON

   15 ids: ids COMMA expr
   16    | expr
   17    | ids COMMA SP expr

   18 for3: assigns

   19 decl: type assigns
   20     | CONST type assigns

   21 assigns: assigns COMMA assign
   22        | assigns COMMA ID
   23        | assign
   24        | ID

   25 assign: ID ASS expr
   26       | ID ADDASS expr
   27       | ID SUBASS expr
   28       | ID MULASS expr
   29       | ID DIVASS expr
   30       | ID REMASS expr
   31       | ID ADDADD
   32       | ID SUBSUB

   33 expr: ID
   34     | INTEGER
   35     | VCHAR
   36     | VSTRING
   37     | expr A_ADD expr
   38     | expr A_SUB expr
   39     | expr A_MUL expr
   40     | expr A_DIV expr
   41     | expr A_REM expr
   42     | LBRACKET expr RBRACKET

   43 cond: condand L_OR condand
   44     | condand

   45 condand: condno L_AND condno
   46        | condno

   47 condno: L_NO condition
   48       | condition

   49 condition: expr R_GT expr
   50          | expr R_GE expr
   51          | expr R_LT expr
   52          | expr R_LE expr
   53          | expr R_EE expr
   54          | expr R_NE expr
   55          | LBRACKET cond RBRACKET

   56 type: INT
   57     | CHAR
   58     | BOOL
   59     | STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
COMMA (258) 15 17 21 22
SEMICOLON (259) 4 5 6 10 11 12 13 14
LBRACE (260) 1 4 7
RBRACE (261) 1 7
ASS (262) 25
ADDASS (263) 26
SUBASS (264) 27
MULASS (265) 28
DIVASS (266) 29
REMASS (267) 30
L_OR (268) 43
L_AND (269) 45
R_EE (270) 53
R_NE (271) 54
R_GT (272) 49
R_GE (273) 50
R_LT (274) 51
R_LE (275) 52
A_ADD (276) 37
A_SUB (277) 38
A_MUL (278) 39
A_DIV (279) 40
A_REM (280) 41
ADDADD (281) 31
SUBSUB (282) 32
L_NO (283) 47
LBRACKET (284) 1 8 9 10 13 14 42 55
RBRACKET (285) 1 8 9 10 13 14 42 55
POINT (286)
WHILE (287) 8
BREAK (288)
RETURN (289) 11 12
CONTINUE (290)
IF (291) 9
ELSE (292)
FOR (293) 10
CONST (294) 20
VOID (295) 1
MAIN (296) 1
SCAN (297) 14
PRINT (298) 13
ID (299) 22 24 25 26 27 28 29 30 31 32 33
CHAR (300) 57
INT (301) 56
BOOL (302) 58
STRING (303) 59
INTEGER (304) 34
VCHAR (305) 35
VSTRING (306) 36
SP (307) 17


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
stmts (55)
    on left: 2 3, on right: 1 3 7
stmt (56)
    on left: 4 5 6 7 8 9 10 11 12 13 14, on right: 2 3 8 9 10
ids (57)
    on left: 15 16 17, on right: 13 14 15 17
for3 (58)
    on left: 18, on right: 10
decl (59)
    on left: 19 20, on right: 5
assigns (60)
    on left: 21 22 23 24, on right: 18 19 20 21 22
assign (61)
    on left: 25 26 27 28 29 30 31 32, on right: 6 21 23
expr (62)
    on left: 33 34 35 36 37 38 39 40 41 42, on right: 11 15 16 17 25
    26 27 28 29 30 37 38 39 40 41 42 49 50 51 52 53 54
cond (63)
    on left: 43 44, on right: 8 9 10 55
condand (64)
    on left: 45 46, on right: 43 44
condno (65)
    on left: 47 48, on right: 45 46
condition (66)
    on left: 49 50 51 52 53 54 55, on right: 47 48
type (67)
    on left: 56 57 58 59, on right: 19 20


State 0

    0 $accept: . program $end

    VOID  shift, and go to state 1

    program  go to state 2


State 1

    1 program: VOID . MAIN LBRACKET RBRACKET LBRACE stmts RBRACE

    MAIN  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: VOID MAIN . LBRACKET RBRACKET LBRACE stmts RBRACE

    LBRACKET  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: VOID MAIN LBRACKET . RBRACKET LBRACE stmts RBRACE

    RBRACKET  shift, and go to state 6


State 6

    1 program: VOID MAIN LBRACKET RBRACKET . LBRACE stmts RBRACE

    LBRACE  shift, and go to state 7


State 7

    1 program: VOID MAIN LBRACKET RBRACKET LBRACE . stmts RBRACE

    LBRACE  shift, and go to state 8
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmts   go to state 21
    stmt    go to state 22
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 8

    4 stmt: LBRACE . SEMICOLON
    7     | LBRACE . stmts RBRACE

    SEMICOLON  shift, and go to state 26
    LBRACE     shift, and go to state 8
    WHILE      shift, and go to state 9
    RETURN     shift, and go to state 10
    IF         shift, and go to state 11
    FOR        shift, and go to state 12
    CONST      shift, and go to state 13
    SCAN       shift, and go to state 14
    PRINT      shift, and go to state 15
    ID         shift, and go to state 16
    CHAR       shift, and go to state 17
    INT        shift, and go to state 18
    BOOL       shift, and go to state 19
    STRING     shift, and go to state 20

    stmts   go to state 27
    stmt    go to state 22
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 9

    8 stmt: WHILE . LBRACKET cond RBRACKET stmt

    LBRACKET  shift, and go to state 28


State 10

   11 stmt: RETURN . expr SEMICOLON
   12     | RETURN . SEMICOLON

    SEMICOLON  shift, and go to state 29
    LBRACKET   shift, and go to state 30
    ID         shift, and go to state 31
    INTEGER    shift, and go to state 32
    VCHAR      shift, and go to state 33
    VSTRING    shift, and go to state 34

    expr  go to state 35


State 11

    9 stmt: IF . LBRACKET cond RBRACKET stmt

    LBRACKET  shift, and go to state 36


State 12

   10 stmt: FOR . LBRACKET stmt cond SEMICOLON for3 RBRACKET stmt

    LBRACKET  shift, and go to state 37


State 13

   20 decl: CONST . type assigns

    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    type  go to state 38


State 14

   14 stmt: SCAN . LBRACKET ids RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 39


State 15

   13 stmt: PRINT . LBRACKET ids RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 40


State 16

   25 assign: ID . ASS expr
   26       | ID . ADDASS expr
   27       | ID . SUBASS expr
   28       | ID . MULASS expr
   29       | ID . DIVASS expr
   30       | ID . REMASS expr
   31       | ID . ADDADD
   32       | ID . SUBSUB

    ASS     shift, and go to state 41
    ADDASS  shift, and go to state 42
    SUBASS  shift, and go to state 43
    MULASS  shift, and go to state 44
    DIVASS  shift, and go to state 45
    REMASS  shift, and go to state 46
    ADDADD  shift, and go to state 47
    SUBSUB  shift, and go to state 48


State 17

   57 type: CHAR .

    $default  reduce using rule 57 (type)


State 18

   56 type: INT .

    $default  reduce using rule 56 (type)


State 19

   58 type: BOOL .

    $default  reduce using rule 58 (type)


State 20

   59 type: STRING .

    $default  reduce using rule 59 (type)


State 21

    1 program: VOID MAIN LBRACKET RBRACKET LBRACE stmts . RBRACE
    3 stmts: stmts . stmt

    LBRACE  shift, and go to state 8
    RBRACE  shift, and go to state 49
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 50
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 22

    2 stmts: stmt .

    $default  reduce using rule 2 (stmts)


State 23

    5 stmt: decl . SEMICOLON

    SEMICOLON  shift, and go to state 51


State 24

    6 stmt: assign . SEMICOLON

    SEMICOLON  shift, and go to state 52


State 25

   19 decl: type . assigns

    ID  shift, and go to state 53

    assigns  go to state 54
    assign   go to state 55


State 26

    4 stmt: LBRACE SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 27

    3 stmts: stmts . stmt
    7 stmt: LBRACE stmts . RBRACE

    LBRACE  shift, and go to state 8
    RBRACE  shift, and go to state 56
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 50
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 28

    8 stmt: WHILE LBRACKET . cond RBRACKET stmt

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    cond       go to state 60
    condand    go to state 61
    condno     go to state 62
    condition  go to state 63


State 29

   12 stmt: RETURN SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 30

   42 expr: LBRACKET . expr RBRACKET

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 64


State 31

   33 expr: ID .

    $default  reduce using rule 33 (expr)


State 32

   34 expr: INTEGER .

    $default  reduce using rule 34 (expr)


State 33

   35 expr: VCHAR .

    $default  reduce using rule 35 (expr)


State 34

   36 expr: VSTRING .

    $default  reduce using rule 36 (expr)


State 35

   11 stmt: RETURN expr . SEMICOLON
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    SEMICOLON  shift, and go to state 65
    A_ADD      shift, and go to state 66
    A_SUB      shift, and go to state 67
    A_MUL      shift, and go to state 68
    A_DIV      shift, and go to state 69
    A_REM      shift, and go to state 70


State 36

    9 stmt: IF LBRACKET . cond RBRACKET stmt

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    cond       go to state 71
    condand    go to state 61
    condno     go to state 62
    condition  go to state 63


State 37

   10 stmt: FOR LBRACKET . stmt cond SEMICOLON for3 RBRACKET stmt

    LBRACE  shift, and go to state 8
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 72
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 38

   20 decl: CONST type . assigns

    ID  shift, and go to state 53

    assigns  go to state 73
    assign   go to state 55


State 39

   14 stmt: SCAN LBRACKET . ids RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    ids   go to state 74
    expr  go to state 75


State 40

   13 stmt: PRINT LBRACKET . ids RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    ids   go to state 76
    expr  go to state 75


State 41

   25 assign: ID ASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 77


State 42

   26 assign: ID ADDASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 78


State 43

   27 assign: ID SUBASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 79


State 44

   28 assign: ID MULASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 80


State 45

   29 assign: ID DIVASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 81


State 46

   30 assign: ID REMASS . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 82


State 47

   31 assign: ID ADDADD .

    $default  reduce using rule 31 (assign)


State 48

   32 assign: ID SUBSUB .

    $default  reduce using rule 32 (assign)


State 49

    1 program: VOID MAIN LBRACKET RBRACKET LBRACE stmts RBRACE .

    $default  reduce using rule 1 (program)


State 50

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


State 51

    5 stmt: decl SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 52

    6 stmt: assign SEMICOLON .

    $default  reduce using rule 6 (stmt)


State 53

   24 assigns: ID .
   25 assign: ID . ASS expr
   26       | ID . ADDASS expr
   27       | ID . SUBASS expr
   28       | ID . MULASS expr
   29       | ID . DIVASS expr
   30       | ID . REMASS expr
   31       | ID . ADDADD
   32       | ID . SUBSUB

    ASS     shift, and go to state 41
    ADDASS  shift, and go to state 42
    SUBASS  shift, and go to state 43
    MULASS  shift, and go to state 44
    DIVASS  shift, and go to state 45
    REMASS  shift, and go to state 46
    ADDADD  shift, and go to state 47
    SUBSUB  shift, and go to state 48

    $default  reduce using rule 24 (assigns)


State 54

   19 decl: type assigns .
   21 assigns: assigns . COMMA assign
   22        | assigns . COMMA ID

    COMMA  shift, and go to state 83

    $default  reduce using rule 19 (decl)


State 55

   23 assigns: assign .

    $default  reduce using rule 23 (assigns)


State 56

    7 stmt: LBRACE stmts RBRACE .

    $default  reduce using rule 7 (stmt)


State 57

   47 condno: L_NO . condition

    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    condition  go to state 84


State 58

   42 expr: LBRACKET . expr RBRACKET
   55 condition: LBRACKET . cond RBRACKET

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 85
    cond       go to state 86
    condand    go to state 61
    condno     go to state 62
    condition  go to state 63


State 59

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   49 condition: expr . R_GT expr
   50          | expr . R_GE expr
   51          | expr . R_LT expr
   52          | expr . R_LE expr
   53          | expr . R_EE expr
   54          | expr . R_NE expr

    R_EE   shift, and go to state 87
    R_NE   shift, and go to state 88
    R_GT   shift, and go to state 89
    R_GE   shift, and go to state 90
    R_LT   shift, and go to state 91
    R_LE   shift, and go to state 92
    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70


State 60

    8 stmt: WHILE LBRACKET cond . RBRACKET stmt

    RBRACKET  shift, and go to state 93


State 61

   43 cond: condand . L_OR condand
   44     | condand .

    L_OR  shift, and go to state 94

    $default  reduce using rule 44 (cond)


State 62

   45 condand: condno . L_AND condno
   46        | condno .

    L_AND  shift, and go to state 95

    $default  reduce using rule 46 (condand)


State 63

   48 condno: condition .

    $default  reduce using rule 48 (condno)


State 64

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   42     | LBRACKET expr . RBRACKET

    A_ADD     shift, and go to state 66
    A_SUB     shift, and go to state 67
    A_MUL     shift, and go to state 68
    A_DIV     shift, and go to state 69
    A_REM     shift, and go to state 70
    RBRACKET  shift, and go to state 96


State 65

   11 stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 66

   37 expr: expr A_ADD . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 97


State 67

   38 expr: expr A_SUB . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 98


State 68

   39 expr: expr A_MUL . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 99


State 69

   40 expr: expr A_DIV . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 100


State 70

   41 expr: expr A_REM . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 101


State 71

    9 stmt: IF LBRACKET cond . RBRACKET stmt

    RBRACKET  shift, and go to state 102


State 72

   10 stmt: FOR LBRACKET stmt . cond SEMICOLON for3 RBRACKET stmt

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    cond       go to state 103
    condand    go to state 61
    condno     go to state 62
    condition  go to state 63


State 73

   20 decl: CONST type assigns .
   21 assigns: assigns . COMMA assign
   22        | assigns . COMMA ID

    COMMA  shift, and go to state 83

    $default  reduce using rule 20 (decl)


State 74

   14 stmt: SCAN LBRACKET ids . RBRACKET SEMICOLON
   15 ids: ids . COMMA expr
   17    | ids . COMMA SP expr

    COMMA     shift, and go to state 104
    RBRACKET  shift, and go to state 105


State 75

   16 ids: expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 16 (ids)


State 76

   13 stmt: PRINT LBRACKET ids . RBRACKET SEMICOLON
   15 ids: ids . COMMA expr
   17    | ids . COMMA SP expr

    COMMA     shift, and go to state 104
    RBRACKET  shift, and go to state 106


State 77

   25 assign: ID ASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 25 (assign)


State 78

   26 assign: ID ADDASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 26 (assign)


State 79

   27 assign: ID SUBASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 27 (assign)


State 80

   28 assign: ID MULASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 28 (assign)


State 81

   29 assign: ID DIVASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 29 (assign)


State 82

   30 assign: ID REMASS expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 30 (assign)


State 83

   21 assigns: assigns COMMA . assign
   22        | assigns COMMA . ID

    ID  shift, and go to state 107

    assign  go to state 108


State 84

   47 condno: L_NO condition .

    $default  reduce using rule 47 (condno)


State 85

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   42     | LBRACKET expr . RBRACKET
   49 condition: expr . R_GT expr
   50          | expr . R_GE expr
   51          | expr . R_LT expr
   52          | expr . R_LE expr
   53          | expr . R_EE expr
   54          | expr . R_NE expr

    R_EE      shift, and go to state 87
    R_NE      shift, and go to state 88
    R_GT      shift, and go to state 89
    R_GE      shift, and go to state 90
    R_LT      shift, and go to state 91
    R_LE      shift, and go to state 92
    A_ADD     shift, and go to state 66
    A_SUB     shift, and go to state 67
    A_MUL     shift, and go to state 68
    A_DIV     shift, and go to state 69
    A_REM     shift, and go to state 70
    RBRACKET  shift, and go to state 96


State 86

   55 condition: LBRACKET cond . RBRACKET

    RBRACKET  shift, and go to state 109


State 87

   53 condition: expr R_EE . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 110


State 88

   54 condition: expr R_NE . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 111


State 89

   49 condition: expr R_GT . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 112


State 90

   50 condition: expr R_GE . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 113


State 91

   51 condition: expr R_LT . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 114


State 92

   52 condition: expr R_LE . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 115


State 93

    8 stmt: WHILE LBRACKET cond RBRACKET . stmt

    LBRACE  shift, and go to state 8
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 116
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 94

   43 cond: condand L_OR . condand

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    condand    go to state 117
    condno     go to state 62
    condition  go to state 63


State 95

   45 condand: condno L_AND . condno

    L_NO      shift, and go to state 57
    LBRACKET  shift, and go to state 58
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr       go to state 59
    condno     go to state 118
    condition  go to state 63


State 96

   42 expr: LBRACKET expr RBRACKET .

    $default  reduce using rule 42 (expr)


State 97

   37 expr: expr . A_ADD expr
   37     | expr A_ADD expr .
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 37 (expr)


State 98

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   38     | expr A_SUB expr .
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 38 (expr)


State 99

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   39     | expr A_MUL expr .
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    $default  reduce using rule 39 (expr)


State 100

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   40     | expr A_DIV expr .
   41     | expr . A_REM expr

    $default  reduce using rule 40 (expr)


State 101

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   41     | expr A_REM expr .

    $default  reduce using rule 41 (expr)


State 102

    9 stmt: IF LBRACKET cond RBRACKET . stmt

    LBRACE  shift, and go to state 8
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 119
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 103

   10 stmt: FOR LBRACKET stmt cond . SEMICOLON for3 RBRACKET stmt

    SEMICOLON  shift, and go to state 120


State 104

   15 ids: ids COMMA . expr
   17    | ids COMMA . SP expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34
    SP        shift, and go to state 121

    expr  go to state 122


State 105

   14 stmt: SCAN LBRACKET ids RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 123


State 106

   13 stmt: PRINT LBRACKET ids RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 124


State 107

   22 assigns: assigns COMMA ID .
   25 assign: ID . ASS expr
   26       | ID . ADDASS expr
   27       | ID . SUBASS expr
   28       | ID . MULASS expr
   29       | ID . DIVASS expr
   30       | ID . REMASS expr
   31       | ID . ADDADD
   32       | ID . SUBSUB

    ASS     shift, and go to state 41
    ADDASS  shift, and go to state 42
    SUBASS  shift, and go to state 43
    MULASS  shift, and go to state 44
    DIVASS  shift, and go to state 45
    REMASS  shift, and go to state 46
    ADDADD  shift, and go to state 47
    SUBSUB  shift, and go to state 48

    $default  reduce using rule 22 (assigns)


State 108

   21 assigns: assigns COMMA assign .

    $default  reduce using rule 21 (assigns)


State 109

   55 condition: LBRACKET cond RBRACKET .

    $default  reduce using rule 55 (condition)


State 110

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   53 condition: expr R_EE expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 53 (condition)


State 111

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   54 condition: expr R_NE expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 54 (condition)


State 112

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   49 condition: expr R_GT expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 49 (condition)


State 113

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   50 condition: expr R_GE expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 50 (condition)


State 114

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   51 condition: expr R_LT expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 51 (condition)


State 115

   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr
   52 condition: expr R_LE expr .

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 52 (condition)


State 116

    8 stmt: WHILE LBRACKET cond RBRACKET stmt .

    $default  reduce using rule 8 (stmt)


State 117

   43 cond: condand L_OR condand .

    $default  reduce using rule 43 (cond)


State 118

   45 condand: condno L_AND condno .

    $default  reduce using rule 45 (condand)


State 119

    9 stmt: IF LBRACKET cond RBRACKET stmt .

    $default  reduce using rule 9 (stmt)


State 120

   10 stmt: FOR LBRACKET stmt cond SEMICOLON . for3 RBRACKET stmt

    ID  shift, and go to state 53

    for3     go to state 125
    assigns  go to state 126
    assign   go to state 55


State 121

   17 ids: ids COMMA SP . expr

    LBRACKET  shift, and go to state 30
    ID        shift, and go to state 31
    INTEGER   shift, and go to state 32
    VCHAR     shift, and go to state 33
    VSTRING   shift, and go to state 34

    expr  go to state 127


State 122

   15 ids: ids COMMA expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 15 (ids)


State 123

   14 stmt: SCAN LBRACKET ids RBRACKET SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 124

   13 stmt: PRINT LBRACKET ids RBRACKET SEMICOLON .

    $default  reduce using rule 13 (stmt)


State 125

   10 stmt: FOR LBRACKET stmt cond SEMICOLON for3 . RBRACKET stmt

    RBRACKET  shift, and go to state 128


State 126

   18 for3: assigns .
   21 assigns: assigns . COMMA assign
   22        | assigns . COMMA ID

    COMMA  shift, and go to state 83

    $default  reduce using rule 18 (for3)


State 127

   17 ids: ids COMMA SP expr .
   37 expr: expr . A_ADD expr
   38     | expr . A_SUB expr
   39     | expr . A_MUL expr
   40     | expr . A_DIV expr
   41     | expr . A_REM expr

    A_ADD  shift, and go to state 66
    A_SUB  shift, and go to state 67
    A_MUL  shift, and go to state 68
    A_DIV  shift, and go to state 69
    A_REM  shift, and go to state 70

    $default  reduce using rule 17 (ids)


State 128

   10 stmt: FOR LBRACKET stmt cond SEMICOLON for3 RBRACKET . stmt

    LBRACE  shift, and go to state 8
    WHILE   shift, and go to state 9
    RETURN  shift, and go to state 10
    IF      shift, and go to state 11
    FOR     shift, and go to state 12
    CONST   shift, and go to state 13
    SCAN    shift, and go to state 14
    PRINT   shift, and go to state 15
    ID      shift, and go to state 16
    CHAR    shift, and go to state 17
    INT     shift, and go to state 18
    BOOL    shift, and go to state 19
    STRING  shift, and go to state 20

    stmt    go to state 129
    decl    go to state 23
    assign  go to state 24
    type    go to state 25


State 129

   10 stmt: FOR LBRACKET stmt cond SEMICOLON for3 RBRACKET stmt .

    $default  reduce using rule 10 (stmt)
